<?xml version="1.0"?>
<launch>
    
    <param name="/use_sim_time" value="true" />
    
    <!-- startup simulated world -->
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" default="$(find mobile_manipulator)/sdf/camera_world.world"/>
            <!-- unpausing at end instead to avoid object table clipping -->
            <arg name="paused" value="true"/>
        </include>

    <include file="$(find mobile_manipulator)/launch/includes/spawn_maze.launch.xml" />
    
    <!-- send robot urdf to param server -->
        <param name="robot_description" command="$(find xacro)/xacro '$(find mobile_manipulator)/urdf/mobile_manipulator.xacro'" />
    
    <!-- push robot_description to factory and spawn robot in gazebo -->
        <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model Mobile_Manipulator" respawn="false" output="screen" />

    <!-- spawn kinect camera -->
    	<node name="spawn_kinect" pkg="gazebo_ros" type="spawn_model" args="-sdf -file $(find mobile_manipulator)/models/kinect/model.sdf -model kinect" respawn="false" output="screen"/>

    <!-- spawn table -->
        <node name="spawn_table" pkg="gazebo_ros" type="spawn_model" args="-sdf -file $(find mobile_manipulator)/models/table/model.sdf -model table" respawn="false" output="screen"/>

    <!-- spawn beer -->
        <node name="spawn_beer" pkg="gazebo_ros" type="spawn_model" args="-sdf -file $(find mobile_manipulator)/models/beer/model.sdf -model beer" respawn="false" output="screen"/>
    
    <!-- Load joint_state_controller -->
        <rosparam file="$(find mobile_manipulator)/cfg/controller/joint_state_controller.yaml" command="load"/>
    <!-- Start joint_state_controller -->
        <node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/>
    
    <!-- Robot state_publisher subscribes to /joint_states and calculats state of the system 
            as transfer functions between the frames and publishes it as the State of the Robot as TF-->
        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
            <param name="publish_frequency" type="double" value="10.0" />
        </node>


    <!-- Load the controllers for UR10 -->
        <rosparam file="$(find ur10_arm)/cfg/controller/ur10_controller.yaml" command="load"/>

        <node name="ur10_arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn ur10_arm_controller" 
            respawn="false" output="screen" 
        /> 
    <!-- Load the controllers -->
        <rosparam file="$(find bh282_hand)/cfg/controller/bh282_controller.yaml" command="load"/>
     <!-- Spawn the controllers -->    
        <node name="bh282_gripper_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn bh282_gripper_controller" 
            respawn="false" output="screen" 
        /> 

    <!-- NOT NEEDED / IT IS USED AS PLUGIN  Load the controllers -->
        <rosparam file="$(find mir100_mobile_base)/cfg/controller/mir100_controller.yaml" command="load"/>

    <!-- NOT NEEDED / IT IS USED AS PLUGIN  Spawn the controllers --> 
        <node name="mir100_mobile_base_controller_spawner" pkg="controller_manager" type="controller_manager" respawn="false"
                    output="screen" ns="/" args="spawn mir100_controller"
        /> 

        <include file="$(find dora_moveit_config)/launch/move_group.launch"/>
        <include file="$(find dora_moveit_config)/launch/moveit_rviz.launch"/>
    <!-- Steer MiR -->
        <node name="rqt_robot_steering" pkg="rqt_robot_steering" type="rqt_robot_steering">
            <param name="default_topic" value="/mir100_controller/cmd_vel"/>
            <param name="default_vx_max" value="1.0" />
            <param name="default_vx_min" value="-1.0" />
            <param name="default_vw_max" value="1.5" />
            <param name="default_vw_min" value="-1.5" />
        </node>
        <!--<node name="point_cloud_object" pkg="mobile_manipulator" type="point_cloud_subscriber.py"/> -->
        <include file = "$(find mobile_manipulator)/launch/pcl.launch"/>

        <node pkg="tf2_ros" type="static_transform_publisher" name="static_tf_map_to_camera_link" args="2.143572 -1.385330 1.598475 0 0.03 -1.83  map camera_link "/>
        <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="static_tf_map_to_camera_link" args="2.143572 -1.385330 1.598475 0 0.261799 1.570801  map camera_link "/> -->
        <!-- <node name="camera_tf_from_model_state" pkg="mobile_manipulator" type="camera_tf_from_model_state.py"/> -->
        
        <!-- <node pkg="mobile_manipulator" type="point_cloud_grasp.py" name="cloud_data"/> -->
       
        

        <!-- if not using mir_navigation, publish static map->odom_frame transform -->
        <node pkg="tf2_ros" type="static_transform_publisher" name="static_tf_map_to_odom_frame" args="0 0 0 0 0 0 map odom_frame"/>
        <node pkg="mobile_manipulator" type="point_cloud_grasp.py" name="cloud_data"/>
        <!-- fixes the frame of the depth map, useful for pointcloud transforms -->
        <!-- <include file="$(find rgbd_launch)/launch/kinect_frames.launch"/> -->

        <!-- creating a collision box at the pose of the table -->
        <!-- quick-fix that only works in sim obv -->
        <node name="sim_table_collision" pkg="mobile_manipulator" type="sim_table_collision.py"/>
        <!-- regularly clear octomap -->
        <!-- <node name="octomap_clearer" pkg="mobile_manipulator" type="octomap_clearer.py"/> -->
        <node name="perform_grasp_sim" pkg="mobile_manipulator" type="perform_grasp_sim.py" output="screen"/>
        
        <!-- unpausing after loading to avoid object table clipping -->
        <node pkg="rosservice" type="rosservice" name="unpause_gazebo" args="call --wait /gazebo/unpause_physics" />
</launch>
