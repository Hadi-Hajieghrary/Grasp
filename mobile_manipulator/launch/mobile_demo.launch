<?xml version="1.0"?>

<launch>
    
    <param name="/use_sim_time" value="false" />
    
    <!-- startup simulated world -->
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <!-- unpausing at end instead to avoid object table clipping -->
            <arg name="paused" value="true"/>
        </include>

    <!-- Starting the world with a bunch of walls -->
    <include file="$(find mobile_manipulator)/launch/includes/spawn_maze.launch.xml" />

    <!-- send robot urdf to param server -->
        <param name="robot_description" command="$(find xacro)/xacro '$(find mobile_manipulator)/urdf/mobile_manipulator.xacro'" />
    
    <!-- push robot_description to factory and spawn robot in gazebo -->
        <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model Mobile_Manipulator" respawn="false" output="screen" />

    <!-- spawn kinect camera -->
    	<node name="spawn_kinect" pkg="gazebo_ros" type="spawn_model" args="-sdf -file $(find mobile_manipulator)/models/kinect/model.sdf -model kinect" respawn="false" output="screen"/>
        
    <!-- spawn table -->
        <node name="spawn_table" pkg="gazebo_ros" type="spawn_model" args="-sdf -file $(find mobile_manipulator)/models/table/model.sdf -model table" respawn="false" output="screen"/>

    <!-- spawn beer -->
        <node name="spawn_beer" pkg="gazebo_ros" type="spawn_model" args="-sdf -file $(find mobile_manipulator)/models/beer/model.sdf -model beer" respawn="false" output="screen"/>
    
    <!-- Load joint_state_controller -->
        <rosparam file="$(find mobile_manipulator)/cfg/controller/joint_state_controller.yaml" command="load"/>
    <!-- Start joint_state_controller -->
        <node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/>
    
    <!-- Robot state_publisher subscribes to /joint_states and calculats state of the system 
            as transfer functions between the frames and publishes it as the State of the Robot as TF-->
        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
            <param name="publish_frequency" type="double" value="10.0" />
        </node>


    <!-- Load the controllers for UR10 -->
        <rosparam file="$(find ur10_arm)/cfg/controller/ur10_controller.yaml" command="load"/>
    <!-- Spawn the UR10 controllers -->
        <node name="ur10_arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn ur10_arm_controller" 
            respawn="false" output="screen" 
        /> 
    <!-- Load the controllers for the BH282 -->
        <rosparam file="$(find bh282_hand)/cfg/controller/bh282_controller.yaml" command="load"/>
     <!-- Spawn the BH282 controllers -->    
        <node name="bh282_gripper_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn bh282_gripper_controller" 
            respawn="false" output="screen" 
        /> 

    <!-- Load the controllers for the MiR100 -->
        <rosparam file="$(find mir100_mobile_base)/cfg/controller/mir100_controller.yaml" command="load"/>

    <!-- Spawn the MiR100 controllers --> 
        <node name="mir100_mobile_base_controller_spawner" pkg="controller_manager" type="controller_manager" respawn="false"
                    output="screen" ns="/" args="spawn mir100_controller">

        </node>
    <!-- Starts the moveit launch files created by the moveit setup assistant. Not very necessary here-->
        <include file="$(find dora_moveit_config)/launch/move_group.launch"/>
    <!-- Starts the Adaptive Monte Carlo Localization launch file gotten from mir_navigation-->
        <include file="$(find mir_navigation)/launch/amcl.launch">
            <arg name="initial_pose_x" value="0.0"/>
            <arg name="initial_pose_y" value="0.0"/>
        </include>
    <!-- Starts the path planner gotten from mir_navigation -->
        <include file="$(find mir_navigation)/launch/start_planner.launch">
        <!-- Passing the 2D map file as parameter for easy interchangability -->
            <arg name="map_file" value="$(find mir_navigation)/map/gazebo_full_map.yaml"/>
        </include>
    
    <!-- Starting the Rviz window for visualisation of planning, localisation and poses -->
    <!-- Basically everything needed for navigation should be visualised here. -->
        <node name="navigation_rviz" pkg="rviz" type="rviz" args="-d $(find mir_navigation)/rviz/navigation.rviz"/> 
        <include file="$(find dora_moveit_config)/launch/moveit_rviz.launch"/>

    <!-- Supposedly this should filter out points that are too far away and too close to the sensor -->
        <node name="b_rep117_laser_filter" pkg="mir_navigation" type="rep117_filter.py" output="screen">
            <remap from="scan" to="b_scan" />
            <remap from="scan_filtered" to="b_scan_rep117" />
        </node>

        <node name="f_rep117_laser_filter" pkg="mir_navigation" type="rep117_filter.py" output="screen">
            <remap from="scan" to="f_scan" />
            <remap from="scan_filtered" to="f_scan_rep117" />
        </node>

        <!-- Python files that find the can, its centerpoint, 
        publishes it as navigation goal and gets the gripper to it -->
        <node name="camera_center_point" pkg="mobile_manipulator" type="point_cloud_subscriber.py"/>
        <node name="navigation_publisher" pkg="mobile_manipulator" type="navigation_goal.py"/>
        <!-- <node name="grab_can" pkg="mobile_manipulator" type="grab_can_simulation.py"/> -->
        <!-- <node name="grasp_pose_subscriber" pkg="mobile_manipulator" type="grasp_pose_subscriber.py" output="screen"/> -->

        <include file = "$(find mobile_manipulator)/launch/pcl.launch"/>

        <!-- Combines the laser inputs into a single topic for use in amcl -->
        <node pkg="topic_tools" type="relay" name="b_scan_relay" args="b_scan scan"/>
        <node pkg="topic_tools" type="relay" name="f_scan_relay" args="f_scan scan"/>

        <!-- Creating a transform between camera_link and fixed frame "map". Translations taken from model.sdf file of kinect camera, rotation is tuned by hand-->
        <node pkg="tf2_ros" type="static_transform_publisher" name="static_tf_map_to_camera_link" args="2.04 -1.5 1.59 -0.015 -0.018 -1.83  map camera_link"/>
        <!-- <node pkg="mobile_manipulator" type="camera_tf_from_model_state.py" name="camera_tf_from_model_state"/> -->
        
        <!-- <node name="camera_tf_from_model_state" pkg="mobile_manipulator" type="camera_tf_from_model_state.py"/> -->

        <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="static_tf_map_to_odom_combined" args="0 0 0 0 0 0 map odom_combined"/> -->

        <!-- unpausing after loading to avoid object table clipping -->
        <node pkg="rosservice" type="rosservice" name="unpause_gazebo" args="call --wait /gazebo/unpause_physics" />

        <!-- creating a collision box at the pose of the table -->
        <!-- quick-fix that only works in sim obv -->
        <!-- <node name="sim_table_collision" pkg="mobile_manipulator" type="sim_table_collision.py"/> -->

        <!-- fixes the frame of the depth map, useful for pointcloud transforms -->
        <!-- <include file="$(find rgbd_launch)/launch/kinect_frames.launch"/> -->
        <!-- transforms pointcloud to relative 'to_frame'  -->
        <!-- <node name="pcl_transform" pkg="mobile_manipulator" type="pcl_transform.py">
            <param name="to_frame" type="str" value="UR10_wrist_3_link"/>
        </node>  -->

        <node pkg="mobile_manipulator" type="point_cloud_grasp.py" name="cloud_data"/>

        <!-- start gpd separately instead: quicker retry if failed: -->
        <!-- so: launch this file and 'roslaunch gpd_ros ur5.launch' -->
        <!-- <include file="$(find gpd_ros)/launch/ur5.launch"/> -->
        
        <!-- regularly clear octomap -->
        <node name="octomap_clearer" pkg="mobile_manipulator" type="octomap_clearer.py"/>
</launch>
